[
  {
    "objectID": "comp_pack_report.html",
    "href": "comp_pack_report.html",
    "title": "Comparison Packages Report",
    "section": "",
    "text": "Here we run a very quick comparison of the workhorse function of two packages arsenal::compareDF and dataCompareR::rCompare. The dataset is just a simple collection of random numerical variables. We use the package microbenchmark and run it 10 times.\n\n\n\n# Define the sizes of the datasets to benchmark\nsizes &lt;- c(10000, 50000, 100000, 200000)\nnum_vars &lt;- 30\n\n# Create a function to generate data\ngenerate_data &lt;- function(n, num_vars) {\n  as.data.frame(matrix(runif(n * num_vars), nrow = n))\n}\n\n\n\n\n\n# Initialize an empty list to store results\nbenchmark_results &lt;- list()\n\n# Benchmarking loop\nfor (size in sizes) {\n  df1 &lt;- generate_data(size, num_vars)\n  df2 &lt;- generate_data(size, num_vars)\n  \n  # Perform the benchmark\n  benchmark_results[[as.character(size)]] &lt;- microbenchmark(\n    comparedf = comparedf(df1, df2),\n    rCompare = rCompare(df1, df2),\n    times = 10  # Number of times to run each test, adjust as needed\n  )\n}\n\n\n\n\n\nplot_data &lt;- do.call(rbind, lapply(names(benchmark_results), function(x) {\n  transform(\n    summary(benchmark_results[[x]]),\n    size = as.numeric(x)\n  )\n}))\n\nplot_data &lt;- plot_data |&gt;\n  mutate(across(c(min, mean, max), ~if_else(size == 2e+05, . * 1000, .)))"
  },
  {
    "objectID": "comp_pack_report.html#simple-datasets-numeric-only",
    "href": "comp_pack_report.html#simple-datasets-numeric-only",
    "title": "Comparison Packages Report",
    "section": "",
    "text": "Here we run a very quick comparison of the workhorse function of two packages arsenal::compareDF and dataCompareR::rCompare. The dataset is just a simple collection of random numerical variables. We use the package microbenchmark and run it 10 times.\n\n\n\n# Define the sizes of the datasets to benchmark\nsizes &lt;- c(10000, 50000, 100000, 200000)\nnum_vars &lt;- 30\n\n# Create a function to generate data\ngenerate_data &lt;- function(n, num_vars) {\n  as.data.frame(matrix(runif(n * num_vars), nrow = n))\n}\n\n\n\n\n\n# Initialize an empty list to store results\nbenchmark_results &lt;- list()\n\n# Benchmarking loop\nfor (size in sizes) {\n  df1 &lt;- generate_data(size, num_vars)\n  df2 &lt;- generate_data(size, num_vars)\n  \n  # Perform the benchmark\n  benchmark_results[[as.character(size)]] &lt;- microbenchmark(\n    comparedf = comparedf(df1, df2),\n    rCompare = rCompare(df1, df2),\n    times = 10  # Number of times to run each test, adjust as needed\n  )\n}\n\n\n\n\n\nplot_data &lt;- do.call(rbind, lapply(names(benchmark_results), function(x) {\n  transform(\n    summary(benchmark_results[[x]]),\n    size = as.numeric(x)\n  )\n}))\n\nplot_data &lt;- plot_data |&gt;\n  mutate(across(c(min, mean, max), ~if_else(size == 2e+05, . * 1000, .)))"
  },
  {
    "objectID": "comp_pack_report.html#survey-data-example",
    "href": "comp_pack_report.html#survey-data-example",
    "title": "Comparison Packages Report",
    "section": "Survey Data Example",
    "text": "Survey Data Example\nHere we look at the differences between the two packages when used on a larger dataset. We also compare the functions which allow the user to extract mismatched data: arsenal::diffs() and dataCompareR::generateMismatchData(). Here we are going to use the package tictoc to simply print the time of execution of each step.\n\nLoad Data\n\nsurvey &lt;- readRDS(\"data/survey_subset.rds\")\nsurvey_modified &lt;- readRDS(\"data/survey_modified.rds\")\n\nThe survey dataset is a sample of random variables from IPUMS - CPS. There are approximately 102k observations and 43 variables.\n\nhead(survey)\n\n    YEAR SERIAL MONTH HWTFINL         CPSID ASECFLAG HFLAG ASECWTH PERNUM\n   &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;num&gt;         &lt;i64&gt;    &lt;int&gt; &lt;int&gt;   &lt;num&gt;  &lt;int&gt;\n1:  2009      1     3      NA 9.916492e-311        1    NA  534.34      1\n2:  2009      1     3      NA 9.916492e-311        1    NA  534.34      2\n3:  2009      2     3      NA 9.916492e-311        1    NA  546.24      1\n4:  2009      2     3      NA 9.916492e-311        1    NA  546.24      2\n5:  2009      3     3      NA 9.916492e-311        1    NA  287.76      1\n6:  2009      3     3      NA 9.916492e-311        1    NA  287.76      2\n   WTFINL        CPSIDV      CPSIDP ASECWT RELATE   AGE   SEX  RACE MARST\n    &lt;num&gt;         &lt;i64&gt;       &lt;num&gt;  &lt;num&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1:     NA 9.916492e-310 2.00712e+11 534.34    101    56     2   100     1\n2:     NA 9.916492e-310 2.00712e+11 534.34    201    59     1   100     1\n3:     NA 9.916492e-310 2.00712e+11 546.24    101    49     2   100     1\n4:     NA 9.916492e-310 2.00712e+11 546.24    201    52     1   100     1\n5:     NA 9.916492e-310 2.00712e+11 287.76    101    35     2   100     1\n6:     NA 9.916492e-310 2.00712e+11 287.76    201    38     1   100     1\n   POPSTAT ASIAN VETSTAT  OCCLY OCC50LY  INDLY IND50LY OCC90LY IND90LY OCC10LY\n     &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;char&gt;  &lt;char&gt; &lt;char&gt;  &lt;char&gt;  &lt;char&gt;  &lt;char&gt;  &lt;char&gt;\n1:       1    NA       1    730      99   7590     808      37     741     730\n2:       1    NA       2    230      93   7870     888      14     850     230\n3:       1    NA       1   4020     754   7860     888     436     842    4000\n4:       1    NA       1    200     123    170     105     475      10     205\n5:       1    NA       1   2320      93   7860     888     157     842    2320\n6:       1    NA       1    710      99   7390     808      26     892     710\n   CLASSWLY WORKLY WKSWORK1 WKSWORK2 UHRSWORKLY WKSUNEM1 WKSUNEM2 FULLPART\n      &lt;int&gt;  &lt;int&gt;    &lt;int&gt;    &lt;int&gt;      &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;\n1:       14      2       52        6         50       99        9        1\n2:       27      2       52        6         50       99        9        1\n3:       22      2       36        3         40        0        0        1\n4:       14      2       52        6         45       99        9        1\n5:       28      2       36        3         38        0        0        1\n6:       22      2       52        6         45       99        9        1\n   WKXPNS NWLOOKWK PENSION FIRMSIZE WANTJOB WHYPTLY USFTPTLW\n    &lt;int&gt;    &lt;int&gt;   &lt;int&gt;    &lt;int&gt;   &lt;int&gt;   &lt;int&gt;    &lt;int&gt;\n1:   1445       99       1        1       0       0        0\n2:   1445       99       1        9       0       0        0\n3:   1001       99       1        2       0       4        0\n4:   1445       99       1        1       0       4        0\n5:   1001       99       3        5       0       4        0\n6:   1445       99       3        2       0       0        0\n\n\n\n\nCompareDF\n\nCreation of comparison object\n\ntic()\nno_index_comparison_object &lt;- comparedf(survey, survey_modified)\ntoc()\n\n3.98 sec elapsed\n\n\n\ntic()\nindex_comparison_object &lt;- comparedf(survey, survey_modified, by=c('CPSID', 'PERNUM', 'YEAR', 'SERIAL'))\ntoc()\n\n4.16 sec elapsed\n\n\nThe final object has this structure:\n\n\nList of 4\n $ frame.summary:Classes 'comparedf.frame.summary' and 'data.frame':    2 obs. of  8 variables:\n $ vars.summary :Classes 'comparedf.vars.summary' and 'data.frame': 44 obs. of  8 variables:\n $ control      :List of 16\n $ Call         : language comparedf(x = survey, y = survey_modified, by = c(\"CPSID\", \"PERNUM\", \"YEAR\",      \"SERIAL\"))\n - attr(*, \"class\")= chr \"comparedf\"\n\n\n\n\nCreation of summary\n\ntic()\nsummary_of_no_index_object &lt;- summary(no_index_comparison_object)\ntoc()\n\n0.02 sec elapsed\n\n\n\ntic()\nsummary_of_index_object &lt;- summary(index_comparison_object)\ntoc()\n\n0 sec elapsed\n\n\nThe final summary object has this structure:\n\n\nList of 9\n $ frame.summary.table     :'data.frame':   2 obs. of  4 variables:\n $ comparison.summary.table:'data.frame':   13 obs. of  2 variables:\n $ vars.ns.table           :'data.frame':   1 obs. of  4 variables:\n $ vars.nc.table           :'data.frame':   1 obs. of  6 variables:\n $ obs.table               :Classes 'data.table' and 'data.frame':  0 obs. of  6 variables:\n  ..- attr(*, \".internal.selfref\")=&lt;externalptr&gt; \n $ diffs.byvar.table       :'data.frame':   38 obs. of  4 variables:\n $ diffs.table             :Classes 'data.table' and 'data.frame':  71 obs. of  10 variables:\n  ..- attr(*, \".internal.selfref\")=&lt;externalptr&gt; \n $ attrs.table             :'data.frame':   0 obs. of  3 variables:\n $ control                 :List of 16\n - attr(*, \"class\")= chr \"summary.comparedf\"\n\n\n\n\nExtracting mismatches\nThe function used is arsenal::diffs(). It extracts mismatched rows, but results needs to be pivoted to be used as a dataframe.\n\ntic()\ndiffs_no_index &lt;- diffs(no_index_comparison_object)\ndiffs_index &lt;- diffs(index_comparison_object)\ntoc()\n\n0.01 sec elapsed\n\n\n\nhead(diffs_index)\n\n     var.x   var.y CPSID PERNUM  YEAR SERIAL values.x     values.y  row.x\n    &lt;char&gt;  &lt;char&gt; &lt;i64&gt;  &lt;int&gt; &lt;int&gt;  &lt;int&gt;   &lt;AsIs&gt;       &lt;AsIs&gt;  &lt;int&gt;\n1: ASECWTH ASECWTH     0      1  2013  64205  1661.33 1615.542.... 952129\n2: ASECWTH ASECWTH     0      2  2009  88163  1503.56 1437.149.... 186918\n3: ASECWTH ASECWTH     0      2  2011  58659  2320.27 2216.076.... 538530\n4: ASECWTH ASECWTH     0      2  2012  46235   193.86 190.3046.... 717508\n5: ASECWTH ASECWTH     0      2  2012  77484   774.52 791.9557.... 781066\n6: ASECWTH ASECWTH     0      3  2010   8958    637.4 625.6545.... 225822\n    row.y\n    &lt;int&gt;\n1: 952129\n2: 186918\n3: 538530\n4: 717508\n5: 781066\n6: 225822\n\n\nYou can actually extract this table directly from the summary object:\n\nhead(summary_of_index_object$diffs.table)\n\n     var.x   var.y CPSID PERNUM  YEAR SERIAL values.x     values.y  row.x\n    &lt;char&gt;  &lt;char&gt; &lt;i64&gt;  &lt;int&gt; &lt;int&gt;  &lt;int&gt;   &lt;AsIs&gt;       &lt;AsIs&gt;  &lt;int&gt;\n1: ASECWTH ASECWTH     0      1  2013  64205  1661.33 1615.542.... 952129\n2: ASECWTH ASECWTH     0      2  2009  88163  1503.56 1437.149.... 186918\n3: ASECWTH ASECWTH     0      2  2011  58659  2320.27 2216.076.... 538530\n4: ASECWTH ASECWTH     0      2  2012  46235   193.86 190.3046.... 717508\n5: ASECWTH ASECWTH     0      2  2012  77484   774.52 791.9557.... 781066\n6: ASECWTH ASECWTH     0      3  2010   8958    637.4 625.6545.... 225822\n    row.y\n    &lt;int&gt;\n1: 952129\n2: 186918\n3: 538530\n4: 717508\n5: 781066\n6: 225822\n\n\n\n\n\nrCompare\n\nCreation of comparison object\nrCompare takes much longer to compare two datasets. Notice that it also warns the user about the data being potentially too large.\n\ntic()\nno_index_comparison_object_r &lt;- rCompare(survey, survey_modified)\n\nRunning rCompare...\n\n\nCoercing input data to data.frame\n\n\nCAUTION - There are 89326206 elements across both data frames.dataCompareR may take a little longer than usual for large data sizes.\n\ntoc()\n\n2.42 sec elapsed\n\n\n\ntic()\nindex_comparison_object_r &lt;- rCompare(survey, survey_modified,\n                                      keys=c('CPSID', 'PERNUM', 'YEAR', 'SERIAL'))\n\nRunning rCompare...\n\n\nCoercing input data to data.frame\n\n\nCAUTION - There are 89326206 elements across both data frames.dataCompareR may take a little longer than usual for large data sizes.\n\ntoc()\n\n13.73 sec elapsed\n\n\nThe final object has this structure:\n\n\nList of 6\n $ meta        :List of 6\n $ colMatching :List of 3\n $ rowMatching :List of 4\n $ cleaninginfo: Named list()\n  ..- attr(*, \"class\")= chr \"cleaninginfo\"\n $ mismatches  :List of 5\n  ..- attr(*, \"class\")= chr \"mismatches\"\n $ matches     : 'matches' chr [1:34] \"AGE\" \"ASECFLAG\" \"ASECWT\" \"ASIAN\" ...\n - attr(*, \"class\")= chr \"dataCompareRobject\"\n\n\nYou can already access the mismatches directly from this object. In the nested list mismatches, the object contains one dataframe per variable, with differences between datasets:\n\nhead(index_comparison_object_r$mismatches$ASECWTH)\n\n       CPSID PERNUM YEAR SERIAL  valueA    valueB variable  typeA  typeB\n952129     0      1 2013  64205 1661.33 1615.5429  ASECWTH double double\n186918     0      2 2009  88163 1503.56 1437.1497  ASECWTH double double\n538530     0      2 2011  58659 2320.27 2216.0770  ASECWTH double double\n717508     0      2 2012  46235  193.86  190.3047  ASECWTH double double\n781066     0      2 2012  77484  774.52  791.9558  ASECWTH double double\n283900     0      3 2010  35393 1928.71 1884.4007  ASECWTH double double\n           diffAB\n952129  45.787072\n186918  66.410345\n538530 104.193005\n717508   3.555313\n781066 -17.435778\n283900  44.309307\n\n\n\n\nCreation of summary\nThe creation of the summary is really quick for both cases.\n\ntic()\nsummary_of_no_index_object_r &lt;- summary(no_index_comparison_object_r)\n\ndataCompareR is generating the summary...\n\nsummary_of_index_object_r &lt;- summary(no_index_comparison_object_r)\n\ndataCompareR is generating the summary...\n\ntoc()\n\n0.17 sec elapsed\n\n\nThe final summary object has this structure:\n\nstr(summary_of_index_object_r, max.level = 1)\n\nList of 33\n $ datanameA            : chr \"survey\"\n $ datanameB            : chr \"survey_modified\"\n $ nrowA                : int 1026738\n $ nrowB                : int 1026738\n $ rounding             : logi FALSE\n $ roundDigits          : num 0\n $ version              :Classes 'package_version', 'numeric_version'  hidden list of 1\n $ runtime              : POSIXct[1:1], format: \"2024-04-15 18:11:23\"\n $ rversion             : chr \"R version 4.3.2 (2023-10-31 ucrt)\"\n $ datasetSummary       :'data.frame':  2 obs. of  3 variables:\n $ ncolCommon           : int 43\n $ ncolInAOnly          : int 0\n $ ncolInBOnly          : int 1\n $ colsInAOnly          : chr(0) \n $ colsInBOnly          : chr \"row_index\"\n $ colsInBoth           : chr [1:43] \"AGE\" \"ASECFLAG\" \"ASECWT\" \"ASECWTH\" ...\n $ ncolID               : num 0\n $ matchKey             : logi NA\n $ typeMismatch         :'data.frame':  1 obs. of  3 variables:\n $ typeMismatchN        : int 1\n $ nrowCommon           : int 1026738\n $ nrowInAOnly          : num 0\n $ nrowInBOnly          : num 0\n $ rowsInAOnly          :'data.frame':  0 obs. of  1 variable:\n $ rowsInBOnly          :'data.frame':  0 obs. of  1 variable:\n $ ncolsAllEqual        : int 38\n $ ncolsSomeUnequal     : int 5\n $ colsWithUnequalValues:'data.frame':  5 obs. of  6 variables:\n $ nrowNAmismatch       : int 0\n $ ColsMatching         : 'matches' chr [1:38] \"AGE\" \"ASECFLAG\" \"ASECWT\" \"ASIAN\" ...\n $ maxDifference        : logi NA\n $ colMismDetls         :List of 5\n $ mismatchCount        : num 5\n - attr(*, \"class\")= chr \"summary.dataCompareRobject\"\n\n\n\n\nExtracting mismatches\nIt takes a bit longer to extract mismatched rows using generateMismatchData(), around 3.4 seconds. The output is a list with mismatched rows from both datasets.\n\ntic()\ndiffs_no_index_r &lt;- generateMismatchData(index_comparison_object_r, survey, survey_modified)\n\nCoercing input data to data.frame\n\ntoc()\n\n3.62 sec elapsed\n\n\n\n# mismatched rows from first dataset (survey)\nhead(diffs_no_index_r$survey_mm)\n\n  YEAR SERIAL MONTH HWTFINL          CPSID ASECFLAG HFLAG ASECWTH PERNUM WTFINL\n1 2009      1     3      NA 20071202814500        1    NA  534.34      1     NA\n2 2009      1     3      NA 20071202814500        1    NA  534.34      2     NA\n3 2009      2     3      NA 20071202885100        1    NA  546.24      1     NA\n4 2009      2     3      NA 20071202885100        1    NA  546.24      2     NA\n5 2009      3     3      NA 20071202862500        1    NA  287.76      1     NA\n6 2009      3     3      NA 20071202862500        1    NA  287.76      2     NA\n           CPSIDV      CPSIDP ASECWT RELATE AGE SEX RACE MARST POPSTAT ASIAN\n1 200712028145011 2.00712e+11 534.34    101  56   2  100     1       1    NA\n2 200712028145021 2.00712e+11 534.34    201  59   1  100     1       1    NA\n3 200712028851011 2.00712e+11 546.24    101  49   2  100     1       1    NA\n4 200712028851021 2.00712e+11 546.24    201  52   1  100     1       1    NA\n5 200712028625011 2.00712e+11 287.76    101  35   2  100     1       1    NA\n6 200712028625021 2.00712e+11 287.76    201  38   1  100     1       1    NA\n  VETSTAT OCCLY OCC50LY INDLY IND50LY OCC90LY IND90LY OCC10LY CLASSWLY WORKLY\n1       1   730      99  7590     808      37     741     730       14      2\n2       2   230      93  7870     888      14     850     230       27      2\n3       1  4020     754  7860     888     436     842    4000       22      2\n4       1   200     123   170     105     475      10     205       14      2\n5       1  2320      93  7860     888     157     842    2320       28      2\n6       1   710      99  7390     808      26     892     710       22      2\n  WKSWORK1 WKSWORK2 UHRSWORKLY WKSUNEM1 WKSUNEM2 FULLPART WKXPNS NWLOOKWK\n1       52        6         50       99        9        1   1445       99\n2       52        6         50       99        9        1   1445       99\n3       36        3         40        0        0        1   1001       99\n4       52        6         45       99        9        1   1445       99\n5       36        3         38        0        0        1   1001       99\n6       52        6         45       99        9        1   1445       99\n  PENSION FIRMSIZE WANTJOB WHYPTLY USFTPTLW\n1       1        1       0       0        0\n2       1        9       0       0        0\n3       1        2       0       4        0\n4       1        1       0       4        0\n5       3        5       0       4        0\n6       3        2       0       0        0\n\n\nWhen using an index, the extraction is slightly faster, but still above 2 seconds.\n\ntic()\ndiffs_index_r &lt;- generateMismatchData(index_comparison_object_r, survey, survey_modified)\n\nCoercing input data to data.frame\n\ntoc()\n\n4.16 sec elapsed"
  }
]